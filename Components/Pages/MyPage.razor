@page "/mypage"
@rendermode InteractiveServer
@using DemoBlazor
@using DemoBlazor.Model
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@inject NavigationManager Navigation
@inject ProtectedSessionStorage SessionStorage
@using System.Collections.Generic


<h1>Welcome to MyPage!</h1>

<h2>Your shopping lists:</h2>

<!-- Lista med shoppinglistor -->
<section class="shopping-list">
    <ul class="list-group">
        @foreach (var list in shoppingLists)
        {
            <li class="list-group-item">
                <h3>@list.Title</h3>

                <!-- Ta bort shoppinglista -->
                <button type="button" class="btn btn-danger small-btn" @onclick="() => RemoveShoppingList(list)">
                    <i class="bi bi-trash"></i>
                </button>

                <!-- Redigera shoppinglista -->
                <button type="button" class="btn btn-primary small-btn" @onclick="() => EditShoppingList(list)">
                    <i class="bi bi-pencil"></i>
                </button>

                <!-- Lägg till produkt i shoppinglistan -->
                <button class="btn btn-primary small-btn" @onclick="() => ShowAddProductForm(list)">
                    <i class="bi bi-plus-circle"></i>
                </button>


                <!-- Lista med produkter -->
                <ul>
                    @foreach (var product in list.Products)
                    {
                        <li>
                            @product.Name - @product.Amount @product.Category

                            <!-- Ta bort produkt -->
                            <button type="button" class="btn btn-danger small-btn" @onclick="() => RemoveProduct(product, list)">
                                <i class="bi bi-trash"></i>
                            </button>

                            <!-- Redigera produkt -->
                            <button type="button" class="btn btn-primary small-btn" @onclick="() => ShowEditProductForm(product)">
                                <i class="bi bi-pencil"></i>
                            </button>
                        </li>
                    }
                </ul>
            </li>
        }
    </ul>

</section>

<NavLink href="/CreateNewShoppingList" class="btnNewShoppingList">Create New Shopping List </NavLink>

@if (showAddProductForm)
{
    <!-- Formulär för att lägga till en ny produkt -->
    <h2>Add new Product:</h2>
    <form>
        <label for="ProductName">Product Name:</label>
        <input type="text" @bind="newProduct.Name" class="form-control" placeholder="Enter product name" />

        <label for="Amount">Amount:</label>
        <input type="number" @bind="newProduct.Amount" class="form-control" placeholder="Enter amount" />

        <label for="Category">Category:</label>
        <select @bind="newProduct.Category" class="form-control">
            <option value="">--Select Category--</option>
            <option value="Fruits & Vegetables">Fruits & Vegetables</option>
            <option value="Fridge items">Fridge items</option>
            <option value="Freezer items">Freezer items</option>
            <option value="Pantry items">Pantry items</option>
            <option value="Hygiene items">Hygiene items</option>
            <option value="Other">Other</option>
        </select>

        <button type="button" class="btn btn-primary" @onclick="() => AddNewProduct(newProduct, selectedList)">Add to Shoppinglist</button>
        <button type="button" class="btn btn-secondary" @onclick="() => showAddProductForm = false">Cancel</button>
    </form>
}

@if (showEditProductForm)
{
    <form>
        <h2>Edit Product:</h2>

        <label for="ProductName">Edit Product Name:</label>
        <input type="text" @bind="selectedProduct.Name" class="form-control" placeholder="Enter product name" />

        <label for="Amount">Edit Amount:</label>
        <input type="number" @bind="selectedProduct.Amount" class="form-control" placeholder="Enter amount" />

        <label for="Category">Edit Category:</label>
        <select @bind="selectedProduct.Category" class="form-control">
            <option value="">--Select Category--</option>
            <option value="Fruits & Vegetables">Fruits & Vegetables</option>
            <option value="Fridge items">Fridge items</option>
            <option value="Freezer items">Freezer items</option>
            <option value="Pantry items">Pantry items</option>
            <option value="Hygiene items">Hygiene items</option>
            <option value="Other">Other</option>
        </select>


        <button type="button" class="btn btn-success" @onclick="SaveEditedProduct">Save Changes</button>
        <button type="button" class="btn btn-secondary" @onclick="() => showEditProductForm = false">Cancel</button>

    </form>
}

@* <button class="btnEditShoppinglist" @onclick="SaveEditedList">Save</button> *@

@code {

    private bool showAddProductForm = false;  // Skapar en variabel som håller reda på om formuläret ska visas
    private Product newProduct = new Product(); 
    private ShoppingList selectedList;

    private bool showEditProductForm = false; // variabel för visa formulär EditProduct
    private Product selectedProduct = new Product(); // Håller den produkt som redigeras

    // Mockad lista av shoppinglistor
    private List<ShoppingList> shoppingLists = new List<ShoppingList>
    {
        new ShoppingList
        {
            Id = 1,
            Title = "Weekly Groceries",
            Products = new List<Product>
            {
                new Product { Id = 1, Name = "Apple", Amount = 1, Category = "Fruits & Vegetables" },
                new Product { Id = 2, Name = "Banana", Amount = 2, Category = "Fruits & Vegetables" },
                new Product { Id = 3, Name = "Orange", Amount = 3, Category = "Fruits & Vegetables" }
            }
        },
        new ShoppingList
        {
            Id = 2,
            Title = "Dinner Shopping",
            Products = new List<Product>
            {
                new Product { Id = 4, Name = "Cream", Amount = 1, Category = "Fridge items" },
                new Product { Id = 5, Name = "Cottage Cheese", Amount = 1, Category = "Fridge items" }
            }
        }
    };

    // Ta bort en shoppinglista
    private void RemoveShoppingList(ShoppingList list)
    {
        var shoppingListToRemove = shoppingLists.FirstOrDefault(l => l.Id == list.Id);
        if (shoppingListToRemove != null)
        {
            shoppingLists.Remove(shoppingListToRemove);
            StateHasChanged(); // Tvinga omrendering av UI / uppdatera UI
        }
    }

    // Redigera shoppinglista
    private void EditShoppingList(ShoppingList uppdatedList)
    {
        // Hitta listan baserat på Id och uppdatera dess titel eller andra egenskaper
        var list = shoppingLists.FirstOrDefault(l => l.Id == uppdatedList.Id);
        if (list != null)
        {
            list.Title = uppdatedList.Title;
        }
        // Tvinga omrendering
        StateHasChanged();
    }

    // Ta bort produkt i listan
    private void RemoveProduct(Product product, ShoppingList list)
    {
        var shoppingList = shoppingLists.FirstOrDefault(l => l.Id == list.Id);
        if (shoppingList != null)
        {
            shoppingList.Products.Remove(product);
            StateHasChanged(); // Uppdatera UI
        }
    }

    // Öppna formluläret för att editera en ny produkt
    private void ShowEditProductForm(Product product)
    {
        selectedProduct = new Product
            {
                Id = product.Id,
                Name = product.Name,
                Amount = product.Amount,
                Category = product.Category 
            };

        showEditProductForm = true; // Visa redigeringsformuläret
    }

    // Redigera produkt i listan
    private void EditProduct(Product product)
    {

    }

    private void SaveEditedProduct()
    {
        // Hitta den shoppinglistan och produkt som ska uppdateras
        var shoppingList = shoppingLists.FirstOrDefault(l => l.Products.Any(p => p.Id == selectedProduct.Id));
        if (shoppingList != null)
        {
            var productToEdit = shoppingList.Products.FirstOrDefault(p => p.Id == selectedProduct.Id);
            if (productToEdit != null)
            {
                productToEdit.Name = selectedProduct.Name;
                productToEdit.Amount = selectedProduct.Amount;
                productToEdit.Category = selectedProduct.Category;
            }
        }

        // Tvinga omrendering av UI:t
        StateHasChanged();

        showEditProductForm = false; // Stäng formuläret
    }


	// hämta den lagrade listan från createneewshoppinglist
    private bool hasLoaded = false;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && !hasLoaded)
        {
            hasLoaded = true; // Se till att detta bara körs en gång

            var storedList = await SessionStorage.GetAsync<ShoppingList>("SavedShoppingList");

            if (storedList.Success && storedList.Value != null)
            {
                shoppingLists.Add(storedList.Value);
                StateHasChanged(); // Uppdatera UI
            }
        }
    }

    private void ShowAddEditProductForm(ShoppingList list)
    {
        // Hämta den shoppinglistan som användaren valt baserat på Id
        selectedList = shoppingLists.FirstOrDefault(l => l.Id == list.Id);
        showAddProductForm = !showAddProductForm; // Växla mellan att visa och dölja formuläret
    }

    private void ShowAddProductForm(ShoppingList list)
    {
        selectedList = list;  // Sätt den valda listan
        showAddProductForm = !showAddProductForm;
    }

    private void AddNewProduct(Product product, ShoppingList list)
    {
        if (selectedList == null)
        {
            return; // Stoppa om listan är null
        }

        // Kontrollera om alla fält är korrekt ifyllda
        if (!string.IsNullOrWhiteSpace(product.Name) && !string.IsNullOrWhiteSpace(product.Category) && product.Amount > 0)
        {
            // Lägg till produkten i den valda shoppinglistan
            selectedList.Products.Add(new Product
            {
                Name = product.Name,
                Amount = product.Amount,
                Category = product.Category
            });

            // Återställ formuläret och stäng det
            newProduct = new Product();  // Rensa fälten
            showAddProductForm = false;  // Dölj formuläret
            StateHasChanged();  // Uppdatera UI
        }
    }
}

<style>
    .btnNewShoppingList,
    .btnEditShoppinglist {
        padding: 10px 20px;
        border-radius: 10px;
        background-color: #007bff;
        color: white;
        font-size: 16px;
        text-decoration: none; /* Tar bort understrykning */
        cursor: pointer;
        transition: background-color 0.3s;
        margin-top: auto; 
    }

        .btnNewShoppingList:hover
        .btnEditShoppinglist:hover {
            background-color: #0056b3;
        }

        .btnNewShoppingList:focus
        .btnEditShoppinglist:focus {
            outline: none;
        }

    /* Justera storleken på knapparna genom att minska paddingen */
    .small-btn {
        padding: 5px 10px; /* Minska paddingen */
        font-size: 12px; /* Minska textstorleken */
    }

    .list-group {
        margin-bottom: 25px;
    }

    body {
        font-family: Arial, sans-serif;
        background-color: #2c2c2c;
        color: white;
    }

    .MyPage-container {
        display: flex;
        justify-content: space-between;
        max-width: 900px;
        margin: auto;
    }

    .list-group-item {
        background-color: #444;
        padding: 15px;
        border-radius: 8px;
        width: 30%;
        color: white;
        font-size: 14px;
    }

</style>
