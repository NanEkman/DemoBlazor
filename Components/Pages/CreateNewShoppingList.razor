@page "/CreateNewShoppingList"
@rendermode InteractiveServer
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@using DemoBlazor.Model
@inject ProtectedSessionStorage SessionStorage
@inject NavigationManager Navigation

<h1>Create New Shopping List</h1>

<section class="shopping-container">
    <section class="shopping-form">
        <fieldset>
            <legend>Shopping List Details</legend>

            <div>
                <label>Shopping List Name:</label>
                <input type="text" class="form-control" @bind="ShoppingList.Title" placeholder="Enter List Name" />
            </div>

            <div>
                <label>Category:</label>
                <select class="form-control" @bind="NewProduct.Category">
                    <option value="">--Select Category--</option>
                    <option value="Fruits & Vegetables">Fruits & Vegetables</option>
                    <option value="Fridge items">Fridge items</option>
                    <option value="Freezer items">Freezer items</option>
                    <option value="Pantry items">Pantry items</option>
                    <option value="Hygiene items">Hygiene items</option>
                    <option value="Other">Other</option>
                </select>
            </div>

            <div>
                <label>Product Name:</label>
                <input type="text" class="form-control" @bind="NewProduct.Name" placeholder="Enter product name" />
            </div>

            <div>
                <label>Amount:</label>
                <input type="number" class="form-control" @bind="NewProduct.Amount" min="1" step="1" />
            </div>
        </fieldset>

        <nav class="button-group">
            <button type="button" class="btn btn-primary" @onclick="AddToList">
                <i class="bi bi-plus-circle"></i> Add to List
            </button>

            <button type="button" class="btn btn-success" @onclick="CreateShoppingList">
                <i class="bi bi-save"></i> Create Shopping List
            </button>

            <button type="button" class="btn btn-danger" @onclick="Cancel">
                <i class="bi bi-x-circle"></i> Cancel
            </button>
        </nav>
    </section>

    <section class="shopping-list">
        <h2>Your Shopping List:</h2>
        <ul>
            @foreach (var item in ShoppingList.Products)
            {
                <li class="shopping-list-item">
                    <strong>@item.Category:</strong> @item.Name (@item.Amount)
                </li>
            }
        </ul>
    </section>

    <section class="recently-purchased">
        <h3>Recently Purchased</h3>
        <ul>
            <li class="recently-purchased-item">Milk</li>
            <li class="recently-purchased-item">Bread</li>
            <li class="recently-purchased-item">Eggs</li>
        </ul>
    </section>
</section>

@code {
    private ShoppingList ShoppingList { get; set; } = new ShoppingList { Products = new List<Product>() };
    private Product NewProduct { get; set; } = new Product();

    private async Task AddToList()
    {
        if (string.IsNullOrWhiteSpace(NewProduct.Name) || string.IsNullOrWhiteSpace(NewProduct.Category))
        {
            return; // Stoppa om produktens namn eller kategori saknas
        }

        // Lägg till en **kopia** av produkten för att undvika referensproblem
        ShoppingList.Products.Add(new Product
            {
                Name = NewProduct.Name,
                Category = NewProduct.Category,
                Amount = NewProduct.Amount
            });

        // Återställ fältet efter tillägg
        NewProduct = new Product();
    }

    private async Task CreateShoppingList()
    {
        if (string.IsNullOrWhiteSpace(ShoppingList.Title) || ShoppingList.Products.Count == 0)
        {
            return; // Stoppa om listan är tom eller saknar titel
        }

        var newList = new ShoppingList
            {
                Id = new Random().Next(1000, 9999), // Generera unikt ID
                Title = ShoppingList.Title,
                Products = new List<Product>(ShoppingList.Products) // Kopiera produkterna
            };

        // Spara i session
        await SessionStorage.SetAsync("SavedShoppingList", newList);

        // Rensa nuvarande shoppinglista
        ShoppingList = new ShoppingList { Products = new List<Product>() };

        Navigation.NavigateTo("/mypage");
    }

    private void Cancel()
    {
        Navigation.NavigateTo("/mypage");
    }
}

<style>
    body {
        font-family: Arial, sans-serif;
        background-color: #2c2c2c;
        color: white;
    }

    .shopping-container {
        display: flex;
        justify-content: space-between;
        max-width: 900px;
        margin: auto;
    }

    .shopping-form, .shopping-list, .recently-purchased {
        background-color: #444;
        padding: 15px;
        border-radius: 8px;
        width: 30%;
        color: white;
        font-size: 14px;
    }

        .shopping-list h2, .recently-purchased h3 {
            font-size: 18px;
            text-align: center;
        }

    .button-group {
        display: flex;
        justify-content: space-between;
        margin-top: 10px;
    }

    .btn {
        padding: 8px 12px;
        border-radius: 5px;
        cursor: pointer;
        border: none;
    }

    .btn-primary {
        background-color: blue;
        color: white;
    }

    .btn-success {
        background-color: green;
        color: white;
    }

    .btn-danger {
        background-color: red;
        color: white;
    }

    .shopping-list-item, .recently-purchased-item {
        padding: 5px;
        border-bottom: 1px solid #ccc;
        cursor: pointer;
    }
</style>
